Requirements and Analysis Document for

Claudio
Cloudio?

Version history

 
Date
Author
Description
 

Introduction

Purpose of application

The Claudio Android application aims to provide a seamless listening experience, primarily by creating a user-friendly and satisfying audio player specifically for audio books.
General characteristics of application

Sleek, refined audio player that offers a suite of innovative functions to enhance the user experience in listening to audio books on your Android devices. By registering personal user accounts, users can take advantage of features such as cloud-based synchronization of their listening sessions as well as cloud-based storage. These features are mainly focused at audio collections, such as music albums and complete audio books, designed to provide an easy and seamless listening experience where users may continue their listening sessions where they left off no matter where they are and no matter what Android device they use.
Scope of application

Claudio aims to provide media playback functionality focusing on large media collections such as audio books. Its preliminary scope does not include providing a source for media content, but rather to provide users a means to enjoy their own audio possessions in a transparent and seamless way. Despite storing their content in the cloud, users should not be able to share content between each other.

The application is limited to the audio file types of Google's specification[1].

Playing audio files.
Synchronization of data including track number and time elapsed.
To allow the user to:
upload audio files on private cloud storage with the purpose of synchronization.
browse and purchase audio files, such as audio books and music, to gain a satisfying experience connecting through multiple devices.
Objectives and success criteria of the project

The success critera of the Claudio application is to enable the user to do the following:
Play audio files.
Sort audio files into playlists with the help of metadata or by manually creating the lists.
Store local data - track where the user paused or stopped listening.
Synchronize the local data through multiple devices.
Definitions, acronyms and abbreviations

Cloud	The server side of the application. Contains data pertaining to the user. See Cloud Storage.
App	Or “application.” In this document an app will refer to an application for the operating system Android.
Client	The application user’s side.
Session	By playing an audio file a session is started. When the player is paused or stopped the session ends.
Bookmark	The current time position (elapsed time) in the book. See Book.
Tags	“Splendid parts, indubitably.”
The phrase tally-ho is a largely British phrase, used in foxhunting, shouted when a rider sees the fox.[
Any number of saved time positions (at any points) in the book.
Metadata	A set of data that describes the data of a file, such as cover art, title, track length and so on. ID3, for example, is a metadata container for most mp3 files.

By utilizing metadata the application may create collections of audio files that can obviously be grouped together. Such groups include complete audio books by comparing title data or the creation of a collection of music from a specific artist.
Seeking	Rewinding or fast-forwarding by varying methods.
Swiping	
Synchronization	To enable any other Android device to pick up where the user left off.
Bookshelf	An analogy between a physical bookshelf (containing books) and the audio books to choose from to play. The bookshelf is a subset of the library of all audio files on the device (see Browse).
Library	A tree hierarchy which enables the user to deselect certain unwanted files to be added to the bookshelf (so that they are ignored in the future).

Library is an analogy of a real-world library.
Audiobook	Contains (i) data required to synchronize clients, such as current playback time and track; (ii) playlists, see Playlist; and (iii) miscellaneous, nonfunctional statistics.
Local Storage	Includes data pertaining to the user, such as session history, current track position and bookmarks.
Cloud Storage	A copy of the latest local storage that a device has uploaded to the server. See Local Storage.


Proposed application
Overview

Functional requirements

In the complete version of the application, users should be able to:
play any audio file on the Android device compatible by Google's specification[1].
continue listening to audio while switching to other applications (multitasking).
freely choose one or more audio tracks present on the Android device from which to form a collection.
choose to either bind these collections to a personal account, or to simply save them as a part of a public profile on the device.
choose to create or log on to a personal account.
form collections from folders and/or based on metadata from audio files present on the storage medium of the device.
play any previously created playlist in the sequence given.
edit or delete any previously created collection from the bookshelf interface.
choose to resume a session in a collection if an earlier session exists. This should take into account both track number within the collection and playback time of the current track.
navigate through a playlist interface and return to the audio player interface.
manually change the playing track.
control the playback a playlist through the controls of the audio player interface. Such controls include play, pause and seek. An extension to the seek function is the time bars of the track and book, which seeks to the marked position. [själva knappar i applikationen, alltså (<) (>), (<<) (>>), eller genom att interagera direkt med någon av våra två seek bars]. 
access all of the playback controls directly from within the audio player interface.
synchronize session data with the cloud service; both synching to the server, receiving data and overwriting local files, and synching the server, overwriting the user’s data on the server. [syncUp och syncDown]
manually synchronize sessions with the cloud (without having to pause or stop audio playback).
manage accessibility of whole collections by transferring them between local and cloud storage.
sort playlists either manually, or automatically by metadata.

En del punkter här ovan hör kanske till non-functional requirements, det får vi fixa sen.
Nonfunctional requirements

Usability

Reliability

Performance

Supportability

Implementation

Verification

Packaging and installation

Legal

Application models

Scenarios

Use case model Use cases priority

Static model

Dynamic model

User interface

Test cases

Possible future directions

Steam / Dropbox
References


APPENDIX

